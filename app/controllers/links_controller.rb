class LinksController < ApplicationController
  before_action :set_link, only: [:show, :destroy]

  # renders show view.
  # before_action runs set_link making the right link object available to the view
  def show
  end

  # Sets up a new link object (without saving to database) and makes it available to the view
  def new
    @link = Link.new
  end

  # Sets up a new link object with :url from params hash
  # Sends the object to UniqueAttributesAssigner which returns a new object with correct unique attributes
  # Creates a flash message if theres errors in Link object
  # Redirects to home#index if object is saved successfuly. Renders new if not.
  def create
    @link = Link.new(url: link_params[:url])
    @link = UniqueAttributesAssigner.ensure_unique(@link)

    if  @link.save
      flash[:success] = 'Shorty was successfully created!'
      redirect_to @link
    else
      if @link.errors.any?
        flash[:error] = collect_errors
      end
      redirect_to root_path
    end
  end

  # Uses destroy method in model to remove the databaseentry related to the link object
  # Redirects to home#index
  def destroy
    @link.destroy
    flash[:success] = 'Shorty was successfully deleted!'
    redirect_to root_path
  end

  # uses contents of params hash to find matching link entry in db
  # redirects user original url
  # captures desired data from request.env and sends it RequestLogger as hash
  def short_redirect
    env = {
      remote_host: request.env["REMOTE_HOST"],
      remote_addr: request.env["REMOTE_ADDR"],
      http_user_agent: request.env["HTTP_USER_AGENT"],
      http_referer: request.env["HTTP_REFERER"],
      request_uri: request.env["REQUEST_URI"]
    }
    RequestLogger.logg_request(env)
    @link = Link.find_by(url_short: params[:url_short])
    if @link.nil?
      flash[:error] = 'The Shorty you tried to visit does not exist!'
      redirect_to root_path
    else
      redirect_to @link.url
    end
  end

  # Gets admin_code passed via params from form data.
  # Redirects to root if there is no match
  # redirects to show action for fetched object if theres a match.
  def search
    @link = Link.find_by(admin_code: params[:admin_code])
    if @link.nil?
      flash[:error] = 'No match for supplied code.'
      redirect_to root_path
    else
      redirect_to @link
    end
  end

  private
    # Sets up @link object from params hash via callback before destroy action
    # Sets link by admin code instead of id
    def set_link
      @link = Link.find_by_admin_code(params[:id])
    end

    # creates a string of all errors in Link object
    def collect_errors
      flash_message = ""
      @link.errors.full_messages.each do |message|
        flash_message += message
        flash_message << "\n"
      end
      flash_message
    end

    # Autogenerated code from creating scafold, protects you from forged params hash
    # Removed url_short since its generated internaly
    def link_params
      params.require(:link).permit(:url)
    end
end
